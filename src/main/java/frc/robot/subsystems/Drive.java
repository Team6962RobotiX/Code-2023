// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogAccelerometer;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private PWMSparkMax leftBank1;
private PWMSparkMax leftBank2;
private MotorControllerGroup leftBank;
private PWMSparkMax rightBank1;
private PWMSparkMax rightBank2;
private MotorControllerGroup rightBank;
private DifferentialDrive differentialDrive;
private AnalogGyro analogGyro;
private AnalogAccelerometer analogAccelerometer;
private Encoder leftBankEncoder;
private Encoder rightBankEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Drive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftBank1 = new PWMSparkMax(0);
 addChild("Left Bank 1",leftBank1);
 leftBank1.setInverted(true);

leftBank2 = new PWMSparkMax(1);
 addChild("Left Bank 2",leftBank2);
 leftBank2.setInverted(true);

leftBank = new MotorControllerGroup(leftBank1, leftBank2  );
 addChild("Left Bank",leftBank);
 

rightBank1 = new PWMSparkMax(2);
 addChild("Right Bank 1",rightBank1);
 rightBank1.setInverted(false);

rightBank2 = new PWMSparkMax(3);
 addChild("Right Bank 2",rightBank2);
 rightBank2.setInverted(false);

rightBank = new MotorControllerGroup(rightBank1, rightBank2  );
 addChild("Right Bank",rightBank);
 

differentialDrive = new DifferentialDrive(leftBank, leftBank1);
 addChild("Differential Drive",differentialDrive);
 differentialDrive.setSafetyEnabled(true);
differentialDrive.setExpiration(0.1);
differentialDrive.setMaxOutput(0.5);


analogGyro = new AnalogGyro(0);
 addChild("AnalogGyro",analogGyro);
 analogGyro.setSensitivity(0.007);

analogAccelerometer = new AnalogAccelerometer(1);
 addChild("AnalogAccelerometer",analogAccelerometer);
 analogAccelerometer.setSensitivity(0.0);
analogAccelerometer.setZero(2.5);

leftBankEncoder = new Encoder(0, 1, false, EncodingType.k4X);
 addChild("Left Bank Encoder",leftBankEncoder);
 leftBankEncoder.setDistancePerPulse(1.0);

rightBankEncoder = new Encoder(2, 3, false, EncodingType.k4X);
 addChild("Right Bank Encoder",rightBankEncoder);
 rightBankEncoder.setDistancePerPulse(1.0);


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

